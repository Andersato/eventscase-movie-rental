# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    key_token: '%env(KEY_TOKEN)%'
    time_expiration_token: '%env(TIME_EXPIRATION_TOKEN)%'

imports:
    - { resource: services/aliases.yaml }
    - { resource: services/use_case.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Eventscase\MovieRental\:
        resource: '../src/*'
        exclude:
            - '../src/{Domain,Application,Infrastructure/Shared/Symfony/Kernel.php,Infrastructure/Shared/Migrations}'

    Eventscase\MovieRental\Domain\:
        resource: '../src/Domain/*/{Validator,Service}'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

#    login_listener:
#        class: 'Autocasion\UserBundle\Listener\LoginListener'
#        arguments: [ '@doctrine.orm.default_entity_manager', '@session' ]
#        tags:
#            - { name: 'kernel.event_listener', event: 'security.interactive_login' }

    Eventscase\MovieRental\Infrastructure\Shared\Symfony\LoginFormAuthenticator:
    Symfony\Component\Security\Core\Encoder\NativePasswordEncoder:
    Eventscase\MovieRental\Infrastructure\User\Security\UserProvider:
    Symfony\Component\Security\Core\Authorization\AuthorizationChecker:

    Eventscase\MovieRental\Infrastructure\Order\EventListener\OrderWasCreatedListener:
        tags:
            - { name: tactician.event_listener, event: Eventscase\MovieRental\Domain\Order\Event\OrderWasCreated, method: onOrderWasCreated }
        public: true

    Eventscase\MovieRental\Infrastructure\Order\EventListener\OrderStatusChangeListener:
        tags:
            - { name: tactician.event_listener, event: Eventscase\MovieRental\Domain\Order\Event\OrderStatusHasChanged, method: onOrderStatusChanged }
        public: true
